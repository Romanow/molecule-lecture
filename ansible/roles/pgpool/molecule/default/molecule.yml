---
dependency:
  name: galaxy
driver:
  name: docker
platforms:
  - name: postgres-master.local
    image: ${MOLECULE_IMAGE:-ubuntu}:${MOLECULE_VERSION:-22.04}
    privileged: true
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    docker_networks:
      - name: cluster
        ipam_config:
          - subnet: 192.168.1.0/24
            gateway: 192.168.1.254
    exposed_pors:
      - 5432/tcp
    networks:
      - name: cluster
        ipv4_address: 192.168.1.10
    groups:
      - database
      - postgres
      - master

  - name: postgres-slave.local
    image: ${MOLECULE_IMAGE:-ubuntu}:${MOLECULE_VERSION:-22.04}
    privileged: true
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    exposed_pors:
      - 5432/tcp
    networks:
      - name: cluster
        ipv4_address: 192.168.1.11
    groups:
      - database
      - postgres
      - slaves

  - name: pgpool.local
    image: ${MOLECULE_IMAGE:-ubuntu}:${MOLECULE_VERSION:-22.04}
    privileged: true
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    exposed_pors:
      - 5432/tcp
    networks:
      - name: cluster
        ipv4_address: 192.168.1.12
    groups:
      - database
      - pgpool

provisioner:
  name: ansible
  log: true
  config_options:
    defaults:
      allow_world_readable_tmpfiles: true
  inventory:
    group_vars:
      database:
        master_ip_address: 192.168.1.10
        database_subnet: 192.168.1.0/24
        pgpool_ip_address: 192.168.1.12
        postgres_instances: [ 192.168.1.10, 192.168.1.11 ]
verifier:
  name: ansible
lint: |
  yamllint .
  ansible-lint
scenario:
  test_sequence:
    - dependency
    - lint
    - syntax
    - create
    - prepare
    - converge
    - verify
    - cleanup
    - destroy
